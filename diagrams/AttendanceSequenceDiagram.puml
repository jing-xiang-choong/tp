@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":AttendanceCommandParser" as AttendanceCommandParser LOGIC_COLOR
participant ":ParserUtil" as ParserUtil LOGIC_COLOR
participant "a:AttendanceCommand" as AttendanceCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant ":Person" as Person MODEL_COLOR
participant ":AttendanceRecord" as AttendanceRecord MODEL_COLOR
end box

[-> LogicManager : execute("attendance s/A0123456X w/1 present")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("attendance s/A0123456X w/1 present")
activate AddressBookParser

create AttendanceCommandParser
AddressBookParser -> AttendanceCommandParser
activate AttendanceCommandParser

AttendanceCommandParser --> AddressBookParser
deactivate AttendanceCommandParser

AddressBookParser -> AttendanceCommandParser : parse(" s/A0123456X w/1 present")
activate AttendanceCommandParser

AttendanceCommandParser -> ParserUtil : parseWeek("1")
activate ParserUtil

ParserUtil --> AttendanceCommandParser : week
deactivate ParserUtil

AttendanceCommandParser -> ParserUtil : parseAttendanceStatus("present")
activate ParserUtil

ParserUtil --> AttendanceCommandParser : status
deactivate ParserUtil

AttendanceCommandParser -> ParserUtil : parseStudentId("A0123456X")
activate ParserUtil

ParserUtil --> AttendanceCommandParser : studentId
deactivate ParserUtil

create AttendanceCommand
AttendanceCommandParser -> AttendanceCommand
activate AttendanceCommand

AttendanceCommand --> AttendanceCommandParser : a
deactivate AttendanceCommand

AttendanceCommandParser --> AddressBookParser : a
deactivate AttendanceCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
AttendanceCommandParser -[hidden]-> AddressBookParser
destroy AttendanceCommandParser

AddressBookParser --> LogicManager : a
deactivate AddressBookParser

LogicManager -> AttendanceCommand : execute(model)
activate AttendanceCommand

AttendanceCommand -> Model : findPersonByStudentId(studentId)
activate Model

Model --> AttendanceCommand : person
deactivate Model

AttendanceCommand -> Person : getAttendanceRecord()
activate Person

Person --> AttendanceCommand : attendanceRecord
deactivate Person

AttendanceCommand -> AttendanceRecord : markAttendance(week, status)
activate AttendanceRecord

create AttendanceRecord as NewAttendanceRecord
AttendanceRecord -> NewAttendanceRecord : <<create new>>
activate NewAttendanceRecord

NewAttendanceRecord --> AttendanceRecord : updatedRecord
deactivate NewAttendanceRecord

AttendanceRecord --> AttendanceCommand : updatedRecord
deactivate AttendanceRecord

create Person as UpdatedPerson
AttendanceCommand -> UpdatedPerson : <<create with updated record>>
activate UpdatedPerson

UpdatedPerson --> AttendanceCommand : updatedPerson
deactivate UpdatedPerson

AttendanceCommand -> Model : setPerson(person, updatedPerson)
activate Model

Model --> AttendanceCommand
deactivate Model

note right of AttendanceCommand
  Alternative Flow: Mark All Students
  If studentId is null (s/all):
  1. Get all persons from model.getAddressBook().getPersonList()
  2. For each person, repeat:
     - getAttendanceRecord()
     - markAttendance() â†’ new AttendanceRecord
     - create new Person with updated record
     - setPerson(oldPerson, newPerson)
  3. Return success message with count
end note

create CommandResult
AttendanceCommand -> CommandResult
activate CommandResult

CommandResult --> AttendanceCommand : r
deactivate CommandResult

AttendanceCommand --> LogicManager : r
deactivate AttendanceCommand

[<-- LogicManager
deactivate LogicManager
@enduml
